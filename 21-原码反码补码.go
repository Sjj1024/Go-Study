package main
import "fmt"

// 位移运算:二进制运算：在计算机运算中都是以二进制运算的，二进制的最高位是符号位，0表示整数，1表示负数
// 例如1的二进制是0000 0001；-1的二进制：1000 0001
// 正数的原码，反码，补码都一样，都是0000 0001
// 负数的反码：他的原码符号位不变（最开始的1不变），其他位取反
// 负数的补码：他的反码+1
// 0的反码补码都是0
// 在计算机运算的时候，都是以补码的方式来运算的
// -1 的原码：1000 0001， 反码：1111 1110， 补码：1111 1111


// 位运算和移位运算：
// 分别是按位与，按位或，按位疑惑，规则是：
// 按位与&  两位都为1 ，结果为1，否则为0
// 按位或| 两位有一个为1，结果为1，否则为0
// 按位异^ 两位一个为0，一个为1，结果为1，否则为0
// 和负数运算后的结果仍然是一个补码，需要将其转换为原码


// 下面的也都是以补码的方式运算的
// 右移位运算：>>低位益处，符号位不变，并用符号位补益处的高位
// 左移位运算：<< 符号位不变，低位补0

func main() {
	// 位移运算,位右移2个:
	var a int = 1 >> 2
	fmt.Println(a)


	var num1 = 2 & 3
	fmt.Println(num1)


	var num2 = 2 | 3
	fmt.Println(num2)


	var num3 = 2 ^  3
	fmt.Println(num3)
}




0
2
3
1
[Finished in 0.8s]
