package main
import "fmt"

// 函数的调用过程：
// 程序运行的时候，有单个区：栈区，堆区，代码区
// 栈区：基本数据类型存档到这里
// 堆区：引用数据类型一般存在这里
// 代码区：代码存档在这里

// 如果返回值是一个，int可以不用括号括起来，如果是多个值，需要使用括号
// return多个值的时候，使用逗号隔开
func getSum(n1 int, n2 int) (int, int) {
	sum := n1 + n2
	jian := n2 - n1
	return sum, jian
}


func main() {
	// 函数的调用机制:
	// 在调用一个函数的时候，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间
	// 和其他的栈的空间区分开来,当函数执行完成后，这个空间就会被回收

	// 基本数据类型：变量存的是数据的值，例如n := 10,n就是基本数据类型
	// 引用数据类型：变量存的是内存地址，例如指针&pre，这个内存地址指向的才是真正的数据值
	// 
	sum, jian := getSum(5, 6)
	fmt.Println(sum, jian)

	// 希望忽略某个返回值，则使用_符号表示占位忽略
	_, jian = getSum(10, 30)
	fmt.Println(jian)

}



11 1
20
[Finished in 1.0s]
